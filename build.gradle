// Before checking in code, please open a command window and
// ***************************************
// run 'gradle clean build assemble run'
// ***************************************
// to build the project, run the tests, update the API docs, and assemble the jar.
// see:  http://www.gradle.org/docs/current/userguide/java_plugin.html and others.

apply plugin: 'java'              // gradle run
apply plugin: 'project-report'   // gradle clean projectReport
apply plugin: 'application'      // gradle distZip
apply plugin: 'eclipse'          // gradle cleanEclipse eclipse
apply plugin: 'idea'         // gradle cleanIdeaProject ideaProject

group = 'edu.ksu.cis.macr.ipds'
description = 'ipds'
version = '1.0-SNAPSHOT'

// application
mainClassName = 'edu.ksu.cis.macr.ipds.IPDSApplication'
applicationDefaultJvmArgs = ["-Dgreeting.language=en"]

task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, "readme.txt").write("Read me!")
    }
}

applicationDistribution.from(createDocs) {
    into "docs"
}

jar {
    manifest {
        attributes("Implementation-Title": "Intelligent Power Distribution System", "Implementation-Version": version)
    }
}

jar.manifest.writeTo("$buildDir/mymanifest.mf")

test {
    systemProperties 'property': 'value'
}
// to publish the jarfile, run 
// gradle uploadArchives
uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}


// To run: java -jar ipds-execjar-1.0-SNAPSHOT.jar

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}
compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
    // mavenLocal()
}

def Properties props = new Properties()
props.load(new FileInputStream(file('run.properties')))
props.load(new FileInputStream(file('src/main/resources/configs/standardproperties/electrical_data_value_column.properties')))
props.load(new FileInputStream(file('src/main/resources/configs/standardproperties/matlab_smartmeter_row.properties')))

processResources {
    from(projectDir) {
        include 'images/**'
    }
}

sourceSets {
    main {
        java { srcDir 'src/main/java' }
        resources { srcDirs 'src/main/resources' }
    }
    test {
        java { srcDir "src/test/java" }
        resources { srcDirs  = ["src/test/resources", "src/test/java"] }
    }
}

configurations {
    dist
}
def jdkHome = System.getenv("JAVA_HOME")
dependencies {
    compile files("$jdkHome/lib/tools.jar")

    compile 'com.rabbitmq:amqp-client:3.2.4'
    compile 'commons-cli:commons-cli:1.1'
    compile 'commons-io:commons-io:1.2'

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'ch.qos.logback:logback-core:1.0.13'

    compile 'org.apache.commons:commons-math3:3.2'
    compile 'net.sourceforge.jmatio:jmatio:1.0'
    compile 'joda-time:joda-time:2.2'

    compile fileTree(dir: 'src/main/resources/lib', include: 'agenttool.core_1.1.4.jar')
    compile fileTree(dir: 'src/main/resources/lib/', include: 'omacs-4.1.02.jar')
    compile fileTree(dir: 'src/main/resources/lib/', include: 'gmods-2.1.02.jar')
    compile fileTree(dir: 'src/main/resources/lib/', include: 'matlabcontrol-4.0.0.jar')
    compile fileTree(dir: 'src/main/resources/lib/', include: 'obaa_pp-1.0.0.jar')
    compile fileTree(dir: 'src/main/resources/lib/', include: 'aasis-1.0-SNAPSHOT.jar')
    // compile project(':obaa_pp')
    // compile project(':aasis')
    // compile fileTree(dir: 'src/main/resources/lib', includes: ['*.jar'])

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.mockito:mockito-all:1.9.5-rc1'
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.mockito:mockito-all:1.9.5-rc1'
    testCompile 'cglib:cglib-nodep:2.2'
}

task javaDoc(type: Javadoc) {
    title = "Intelligent Power Distribution System ${version}"
    source = sourceSets.main.java
    classpath = configurations.compile
}

task buildXML(dependsOn: 'classes', type: JavaExec) {
    main = 'edu.ksu.cis.macr.ipds.utils.IPDSBuilder'
    classpath = sourceSets.main.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javaDoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
//    doLast {
//        copy {
//            from "$buildDir/docs/javadoc"
//            into "$buildDir/distAll"
//        }
//        copy {
//            from "$buildDir/libs"
//            into "$buildDir/distAll"
//        }
//    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
//classes.dependsOn clean
//run.dependsOn classes
jar.dependsOn javadocJar

defaultTasks 'buildXML'


println "java.version = ${System.getProperty('java.version')}"
println "java.home    = ${System.getProperty('java.home')}"
println "jdkHome      = ${jdkHome}"
println "JAVA_HOME environment variable (It will use this to compile.) = ${System.getenv("JAVA_HOME")}"

// creates files to allow bootstrapping
task wrapper(type: Wrapper) { gradleVersion = '2.2' }