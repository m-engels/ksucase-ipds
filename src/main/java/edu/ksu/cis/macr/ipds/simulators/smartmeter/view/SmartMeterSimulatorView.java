package edu.ksu.cis.macr.ipds.simulators.smartmeter.view;

import edu.ksu.cis.macr.aasis.simulator.clock.Clock;
import edu.ksu.cis.macr.ipds.simulators.smartmeter.model.SmartMeterSimulatorTableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;

/**
 The SmartMeterSimulatorView shows the current sensor data for the SelfOrganization simulation.
 */
public class SmartMeterSimulatorView extends JFrame {

  private static final Logger LOG = LoggerFactory.getLogger(SmartMeterSimulatorView.class);
//    static {
//        final LookAndFeelInfo[] installedLookAndFeels = UIManager
//                .getInstalledLookAndFeels();
//        try {
//            for (final LookAndFeelInfo info : installedLookAndFeels) {
//                if ("Nimbus".equals(info.getName())) {
//                    UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
//            /* should not occur */
//            LOG.debug("Error: sensor frame instantiation error. ");
//        } catch (final UnsupportedLookAndFeelException e) {
//            /* use default look and feel */
//            LOG.debug("Using default look and feel. ");
//        }
//    }
  /**
   Default serial version ID.
   */
  private static final long serialVersionUID = 1L;
  /**
   The default preferred size of the frame.
   */
  private static final Dimension DEFAULT_PREFERRED_SIZE = new Dimension(450,
          775);
  private boolean stepMode = false;
  private String[] columnNames = {"RowID", "AgentAbbrev",
          "Phase A - P (load)",
          "Phase A - Q (load)",
          "Phase B - P (load)",
          "Phase B - Q (load)",
          "Phase C - P (load)",
          "Phase C - Q (load)",
          "P (generation)",
          "Q (generation)",
          "Voltage Phase A",
          "Voltage Phase B",
          "Voltage Phase C"};
  private long timeSliceNumber = 0;

  private HashMap<String, Component> componentMap;
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JTable jTableNow;
  private javax.swing.JLabel lblPurpose;
  private javax.swing.JLabel lblSimTime;
  private javax.swing.JPanel sidePanel;
  private javax.swing.JPanel topPanel;
  private javax.swing.JLabel txtSimTime;
  private javax.swing.JTextField txtSimulationTime;
  private javax.swing.JTextField txtTimeSliceNumber;

  /**
   Creates new form
   @param model - the table model for the simulator view
   */
  public SmartMeterSimulatorView(SmartMeterSimulatorTableModel model) {
    super("Sensor View");
    initComponents();
    jTableNow.setModel(model);
    createComponentMap();
  }


  //  AUTO CODE BELOW.................................................................

  private void createComponentMap() {
    componentMap = new HashMap<>();
    Component[] components = this.getContentPane().getComponents();
    for (Component component : components) {
      componentMap.put(component.getName(), component);
    }
  }

  public Component getComponentByName(String name) {
    if (componentMap.containsKey(name)) {
      return componentMap.get(name);
    } else {
      return null;
    }
  }

  public long getTimeSliceNumber() {
    return this.timeSliceNumber;
  }

  public synchronized void setTimeSliceNumber(long timeSlice) {
    this.timeSliceNumber = timeSlice;
    String strTimeSlice = Long.toString(timeSlice);
    // LOG.debug("timeSlice = {}, i.e. {}", timeSlice, strTimeSlice);
    this.txtTimeSliceNumber.setText(strTimeSlice);
  }

  /**
   This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    topPanel = new javax.swing.JPanel();
    txtSimTime = new javax.swing.JLabel();
    lblSimTime = new javax.swing.JLabel();
    lblPurpose = new javax.swing.JLabel();
    txtSimulationTime = new javax.swing.JTextField();
    txtTimeSliceNumber = new javax.swing.JTextField();
    sidePanel = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    jTableNow = new javax.swing.JTable();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    topPanel.setBackground(new java.awt.Color(204, 204, 255));

    txtSimTime.setLabelFor(lblSimTime);
    txtSimTime.setName("simTime"); // NOI18N

    lblSimTime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    lblSimTime.setText("Simulation Time:");

    lblPurpose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    lblPurpose.setText("Simulated Sensor Values");

    txtSimulationTime.setEditable(false);
    txtSimulationTime.setBackground(new java.awt.Color(204, 204, 255));
    txtSimulationTime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    txtSimulationTime.setText("jTextField2");
    txtSimulationTime.setBorder(null);
//      txtSimulationTime.addActionListener(new java.awt.event.ActionListener() {
//        @Override
//        public synchronized void actionPerformed(java.awt.event.ActionEvent evt) {
//          txtSimulationTimeActionPerformed(evt);
//        }
//      });
    // replace with method listener
    txtSimulationTime.addActionListener(this::txtSimulationTimeActionPerformed);

    txtTimeSliceNumber.setBackground(new java.awt.Color(204, 204, 255));
    txtTimeSliceNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txtTimeSliceNumber.setText("jTextField1");
    txtTimeSliceNumber.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    txtTimeSliceNumber.setMaximumSize(new java.awt.Dimension(333, 333));
    txtTimeSliceNumber.setName(""); // NOI18N
  //  txtTimeSliceNumber.setNextFocusableComponent(txtSimulationTime); // deprecated
    txtTimeSliceNumber.setSelectionStart(0);

    javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
    topPanel.setLayout(topPanelLayout);
    topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblPurpose)
                            .addGap(18, 18, 18)
                            .addComponent(txtTimeSliceNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addGap(31, 31, 31)
                            .addComponent(lblSimTime)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSimulationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(txtSimTime, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(39, Short.MAX_VALUE))
    );
    topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblSimTime)
                                            .addComponent(txtSimulationTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblPurpose)
                                            .addComponent(txtTimeSliceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                    .addComponent(txtSimTime))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    txtSimTime.getAccessibleContext().setAccessibleDescription("simTime");

    sidePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Sensor Values"));
    sidePanel.setMinimumSize(new java.awt.Dimension(45, 45));

    jTableNow.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{ },
            new String[]{
                    "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13"
            }
    ));
    jScrollPane3.setViewportView(jTableNow);

    javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
    sidePanel.setLayout(sidePanelLayout);
    sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
    );
    sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  public synchronized void intializeAndDisplay(final int timeSlicesElapsedSinceStart, final GregorianCalendar simulationStartTime) {
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    setTitle("SelfOrganization Simulation - System Sensor Values");
    setSimulationTime(simulationStartTime);
    setTimeSliceNumber(0);
    int pixelsFromTop = 600;
    int pixelsFromLeft = 0;
    setLocation(pixelsFromLeft, pixelsFromTop);
    pack();  // call pack right before setVisible
    setVisible(true);
    startListener();
  }

  public synchronized void intializeAndDisplay(final int timeSlicesElapsedSinceStart, final GregorianCalendar simulationStartTime, int pixelsFromLeft, int pixelsFromTop) {
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    setTitle("SelfOrganization Simulation - System Sensor Values");
    setSimulationTime(simulationStartTime);
    setTimeSliceNumber(0);
    setLocation(pixelsFromLeft, pixelsFromTop);
    pack();  // call pack right before setVisible
    setVisible(true);
    startListener();
  }

  public synchronized void setSimulationTime(GregorianCalendar cal) {
    Date creationDate = cal.getTime();
    SimpleDateFormat date_format = new SimpleDateFormat("EEE, MMM d yyyy h:mm:ss a");
    this.txtSimulationTime.setText(date_format.format(creationDate));
  }

  public synchronized void startListener() {
    Thread t = new Thread(() -> {
      while (true) {
        updateSensorsView();
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
            LOG.error("Error: InterruptedException in ConnectionView listener. {}", e.getMessage());
        }
      }

    });

    t.start();
  }

  private void txtSimulationTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSimulationTimeActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtSimulationTimeActionPerformed

  public synchronized void updateData(final SmartMeterSimulatorTableModel systemSensorDataTableModel) {
    jTableNow.setModel(systemSensorDataTableModel);
  }

  public synchronized void updateSensorsView() {
    //Objects.requireNonNull(ec, "ERROR - LocalMessageView.updateVisualizationPanel() requires EC");
    //if (ec.getCapability(IPowerCommunicationCapability.class) == null) {
    //    return;
    //}
    // TODO:  The integer we want isn't actually the elapsed milliseconds (from the run manager)
    // TODO:  We want to see the count of the number of turns (see each ipds's organization getTurns() method.

    //int numElapsed = (int) this.getAgent().createOrganization().getTurns();
    setTimeSliceNumber(Clock.getTimeSlicesElapsedSinceStart());
    this.setTimeSliceNumber(timeSliceNumber);

  }


  // End of variables declaration//GEN-END:variables
}
